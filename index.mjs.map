{"version":3,"file":"index.mjs","sources":["../lib/is_set.js","../lib/bit_value.js","../lib/main.js","../lib/from_adjacency_list_iterator_map.js","../lib/from_adjacency_list_iterator.js","../lib/from_edges_iterator_map.js","../lib/from_edges_iterator.js","../lib/set_bit.js","../lib/clear_bit.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport Boolean from '@stdlib/boolean-ctor';\n\n\n// MAIN //\n\n/**\n* Checks whether a bit is set.\n*\n* @private\n* @param {integer32} value - integer value\n* @param {NonNegativeInteger} i - bit to check\n* @returns {boolean} boolean indicating whether a bit is set\n*\n* @example\n* var bool = isSet( 4, 2 );\n* // returns true\n*\n* bool = isSet( 4, 0 );\n* // returns false\n*/\nfunction isSet( value, i ) {\n\treturn Boolean( ( value >> i ) & 1 );\n}\n\n\n// EXPORTS //\n\nexport default isSet;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the value (either `0` or `1`) of a specified bit.\n*\n* @private\n* @param {integer32} value - integer value\n* @param {NonNegativeInteger} i - bit number\n* @returns {NonNegativeInteger} bit value\n*\n* @example\n* var b = bitValue( 4, 2 );\n* // returns 1\n*\n* b = bitValue( 4, 0 );\n* // returns 0\n*/\nfunction bitValue( value, i ) {\n\treturn ( value >> i ) & 1;\n}\n\n\n// EXPORTS //\n\nexport default bitValue;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-restricted-syntax, no-invalid-this */\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport isArrayLikeObject from '@stdlib/assert-is-array-like-object';\nimport isCollection from '@stdlib/assert-is-collection';\nimport isFunction from '@stdlib/assert-is-function';\nimport isObject from '@stdlib/assert-is-object';\nimport hasIteratorSymbolSupport from '@stdlib/assert-has-iterator-symbol-support';\nimport ITERATOR_SYMBOL from '@stdlib/symbol-iterator';\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport Int32Array from '@stdlib/array-int32';\nimport Int8Array from '@stdlib/array-int8';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport ceil from '@stdlib/math-base-special-ceil';\nimport floor from '@stdlib/math-base-special-floor';\nimport grev from '@stdlib/blas-ext-base-grev';\nimport fromIteratorAdjList from './from_adjacency_list_iterator.js';\nimport fromIteratorAdjListMap from './from_adjacency_list_iterator_map.js';\nimport fromIteratorEdges from './from_edges_iterator.js';\nimport fromIteratorEdgesMap from './from_edges_iterator_map.js';\nimport setBit from './set_bit.js';\nimport clearBit from './clear_bit.js';\nimport isSet from './is_set.js';\nimport bitValue from './bit_value.js';\n\n\n// VARIABLES //\n\nvar HAS_ITERATOR_SYMBOL = hasIteratorSymbolSupport();\nvar NBITS = Int32Array.BYTES_PER_ELEMENT * 8; // 8 bits per byte\n\n\n// MAIN //\n\n/**\n* Compact adjacency matrix constructor.\n*\n* @constructor\n* @param {NonNegativeInteger} N - number of vertices\n* @throws {TypeError} must provide a nonnegative integer\n* @returns {CompactAdjacencyMatrix} adjacency matrix instance\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*/\nfunction CompactAdjacencyMatrix( N ) {\n\tif ( !( this instanceof CompactAdjacencyMatrix ) ) {\n\t\treturn new CompactAdjacencyMatrix( N );\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( '1S92K', N ) );\n\t}\n\tthis._N = N; // number of vertices\n\tthis._M = 0; // number of edges\n\tthis._buffer = new Int32Array( ceil( N*N/NBITS ) ); // square matrix\n\treturn this;\n}\n\n/**\n* Creates a compact adjacency matrix from an adjacency list.\n*\n* @name fromAdjacencyList\n* @memberof CompactAdjacencyMatrix\n* @type {Function}\n* @param {(ArrayLikeObject|Iterable)} list - adjacency list\n* @param {Function} [clbk] - callback to invoke for each list element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a compact adjacency matrix\n* @throws {TypeError} first argument must be an array-like object or an iterable\n* @throws {TypeError} second argument must be a function\n* @throws {TypeError} each element of a provided adjacency list must be an array-like object\n* @throws {TypeError} an iterator must return an array-like object containing vertices\n* @throws {TypeError} when provided an iterator, a callback must return an array-like object containing vertices\n* @returns {CompactAdjacencyMatrix} adjacency matrix instance\n*\n* @example\n* var list = [ [ 1, 2 ], [ 2 ], [ 3 ], [] ];\n*\n* var adj = CompactAdjacencyMatrix.fromAdjacencyList( list );\n* // returns <CompactAdjacencyMatrix>\n*\n* var bool = adj.hasEdge( 0, 1 );\n* // returns true\n*\n* bool = adj.hasEdge( 0, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 1, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 2, 3 );\n* // returns true\n*/\nsetReadOnly( CompactAdjacencyMatrix, 'fromAdjacencyList', function fromAdjacencyList( list ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar edges;\n\tvar clbk;\n\tvar adj;\n\tvar tmp;\n\tvar len;\n\tvar N;\n\tvar i;\n\tvar j;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( format('1S901') );\n\t}\n\tif ( this !== CompactAdjacencyMatrix ) {\n\t\tthrow new TypeError( format('1S91c') );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 1 ) {\n\t\tclbk = arguments[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( '1S92H', clbk ) );\n\t\t}\n\t\tif ( nargs > 2 ) {\n\t\t\tthisArg = arguments[ 2 ];\n\t\t}\n\t}\n\tif ( isArrayLikeObject( list ) ) {\n\t\tN = list.length;\n\t\tadj = new this( N );\n\t\tif ( clbk ) {\n\t\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\t\tedges = clbk.call( thisArg, list[ i ], i );\n\t\t\t\tif ( !isCollection( edges ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1S9Aq', edges ) );\n\t\t\t\t}\n\t\t\t\tfor ( j = 0; j < edges.length; j++ ) {\n\t\t\t\t\tadj.addEdge( i, edges[ j ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn adj;\n\t\t}\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tedges = list[ i ];\n\t\t\tif ( !isCollection( edges ) ) {\n\t\t\t\tthrow new TypeError( format( '1S9Ar', list ) );\n\t\t\t}\n\t\t\tfor ( j = 0; j < edges.length; j++ ) {\n\t\t\t\tadj.addEdge( i, edges[ j ] );\n\t\t\t}\n\t\t}\n\t\treturn adj;\n\t}\n\tif ( isObject( list ) && HAS_ITERATOR_SYMBOL && isFunction( list[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\ttmp = list[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( tmp.next ) ) {\n\t\t\tthrow new TypeError( format( '1S92J', list ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorAdjListMap( tmp, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIteratorAdjList( tmp );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length;\n\t\tadj = new this( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tedges = tmp[ i ];\n\t\t\tfor ( j = 0; j < edges.length; j++ ) {\n\t\t\t\tadj.addEdge( i, edges[ j ] );\n\t\t\t}\n\t\t}\n\t\treturn adj;\n\t}\n\tthrow new TypeError( format( '1S92J', list ) );\n});\n\n/**\n* Creates a compact adjacency matrix from a list of edges.\n*\n* @name fromEdges\n* @memberof CompactAdjacencyMatrix\n* @type {Function}\n* @param {NonNegativeInteger} N - number of vertices\n* @param {(ArrayLikeObject|Iterable)} edges - list of edges\n* @param {Function} [clbk] - callback to invoke for each list element\n* @param {*} [thisArg] - context\n* @throws {TypeError} `this` context must be a constructor\n* @throws {TypeError} `this` must be a compact adjacency matrix\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be an array-like object\n* @throws {TypeError} third argument must be a function\n* @throws {TypeError} each element of a provided list of edges must be a two-element array-like object containing vertices\n* @throws {TypeError} an iterator must return a two-element array-like object containing vertices\n* @throws {TypeError} when provided an iterator, a callback must return a two-element array-like object containing vertices\n* @returns {CompactAdjacencyMatrix} adjacency matrix instance\n*\n* @example\n* var edges = [ [ 0, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ] ];\n*\n* var adj = CompactAdjacencyMatrix.fromEdges( 4, edges );\n* // returns <CompactAdjacencyMatrix>\n*\n* var bool = adj.hasEdge( 0, 1 );\n* // returns true\n*\n* bool = adj.hasEdge( 0, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 1, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 2, 3 );\n* // returns true\n*/\nsetReadOnly( CompactAdjacencyMatrix, 'fromEdges', function fromEdges( N, edges ) {\n\tvar thisArg;\n\tvar nargs;\n\tvar clbk;\n\tvar edge;\n\tvar adj;\n\tvar tmp;\n\tvar len;\n\tvar i;\n\tif ( !isFunction( this ) ) {\n\t\tthrow new TypeError( format('1S901') );\n\t}\n\tif ( this !== CompactAdjacencyMatrix ) {\n\t\tthrow new TypeError( format('1S91c') );\n\t}\n\tnargs = arguments.length;\n\tif ( nargs > 2 ) {\n\t\tclbk = arguments[ 2 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( format( '1S93N', clbk ) );\n\t\t}\n\t\tif ( nargs > 3 ) {\n\t\t\tthisArg = arguments[ 3 ];\n\t\t}\n\t}\n\tif ( !isNonNegativeInteger( N ) ) {\n\t\tthrow new TypeError( format( '1S92d', N ) );\n\t}\n\tif ( isArrayLikeObject( edges ) ) {\n\t\tif ( clbk ) {\n\t\t\tadj = new this( N );\n\t\t\tfor ( i = 0; i < edges.length; i++ ) {\n\t\t\t\tedge = clbk.call( thisArg, edges[ i ], i );\n\t\t\t\tif ( !isArrayLikeObject( edge ) ) {\n\t\t\t\t\tthrow new TypeError( format( '1S9Aq', edge ) );\n\t\t\t\t}\n\t\t\t\tadj.addEdge( edge[ 0 ], edge[ 1 ] );\n\t\t\t}\n\t\t\treturn adj;\n\t\t}\n\t\tadj = new this( N );\n\t\tfor ( i = 0; i < edges.length; i++ ) {\n\t\t\tedge = edges[ i ];\n\t\t\tif ( !isArrayLikeObject( edge ) ) {\n\t\t\t\tthrow new TypeError( format( '1S9As', edge ) );\n\t\t\t}\n\t\t\tadj.addEdge( edge[ 0 ], edge[ 1 ] );\n\t\t}\n\t\treturn adj;\n\t}\n\n\tif ( isObject( edges ) && HAS_ITERATOR_SYMBOL && isFunction( edges[ ITERATOR_SYMBOL ] ) ) { // eslint-disable-line max-len\n\t\ttmp = edges[ ITERATOR_SYMBOL ]();\n\t\tif ( !isFunction( tmp.next ) ) {\n\t\t\tthrow new TypeError( format( '1S92J', edges ) );\n\t\t}\n\t\tif ( clbk ) {\n\t\t\ttmp = fromIteratorEdgesMap( tmp, clbk, thisArg );\n\t\t} else {\n\t\t\ttmp = fromIteratorEdges( tmp );\n\t\t}\n\t\tif ( tmp instanceof Error ) {\n\t\t\tthrow tmp;\n\t\t}\n\t\tlen = tmp.length;\n\t\tadj = new this( len/2 );\n\t\tfor ( i = 0; i < len; i += 2 ) {\n\t\t\tadj.addEdge( tmp[ i ], tmp[ i+1 ] );\n\t\t}\n\t\treturn adj;\n\t}\n\tthrow new TypeError( format( '1S9At', edges ) );\n});\n\n/**\n* Returns indices (\"bucket\" and bit offset) for an `(i,j)` vertex pair.\n*\n* @private\n* @name _loc\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - starting vertex\n* @param {NonNegativeInteger} j - ending vertex\n* @param {Array} out - output array\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} first argument must not exceed matrix dimensions\n* @throws {RangeError} second argument must not exceed matrix dimensions\n* @returns {Array} output array\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, '_loc', function loc( i, j, out ) {\n\tvar bucket;\n\tvar bit;\n\tvar idx;\n\n\t// Compute a strided index for the desired bit:\n\tidx = ( i*this._N ) + j;\n\n\t// Compute the index of the buffer element (bucket) containing the bit:\n\tbucket = floor( idx / NBITS );\n\n\t// Compute the bit offset:\n\tbit = idx - ( bucket*NBITS );\n\n\t// Set the output values:\n\tout[ 0 ] = bucket;\n\tout[ 1 ] = bit;\n\n\treturn out;\n});\n\n/**\n* Adds a directed edge between two vertices.\n*\n* @name addEdge\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - starting vertex\n* @param {NonNegativeInteger} j - ending vertex\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} first argument must not exceed matrix dimensions\n* @throws {RangeError} second argument must not exceed matrix dimensions\n* @returns {CompactAdjacencyMatrix} adjacency matrix instance\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'addEdge', function addEdge( i, j ) {\n\tvar idx;\n\tif ( !isNonNegativeInteger( i ) ) {\n\t\tthrow new TypeError( format( '1S92d', i ) );\n\t}\n\tif ( !isNonNegativeInteger( j ) ) {\n\t\tthrow new TypeError( format( '1S93X', j ) );\n\t}\n\tif ( i >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Au', i ) );\n\t}\n\tif ( j >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Av', j ) );\n\t}\n\t// Resolve the `(i,j)` pair:\n\tidx = this._loc( i, j, [ 0, 0 ] );\n\n\t// Set the bit for the edge:\n\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) === false ) {\n\t\tthis._buffer[ idx[0] ] = setBit( this._buffer[ idx[0] ], idx[1] );\n\t\tthis._M += 1;\n\t}\n\treturn this;\n});\n\n/**\n* Returns the list of all edges.\n*\n* @name edges\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Array}\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var edges = adj.edges;\n* // returns [ [ 0, 1 ], [ 0, 2 ], [ 1, 2 ], [ 2, 3 ] ]\n*/\nsetReadOnlyAccessor( CompactAdjacencyMatrix.prototype, 'edges', function edges() {\n\tvar edges;\n\tvar idx;\n\tvar i;\n\tvar j;\n\n\tedges = [];\n\tidx = [ 0, 0 ];\n\tfor ( i = 0; i < this._N; i++ ) {\n\t\tfor ( j = 0; j < this._N; j++ ) {\n\t\t\t// Resolve the `(i,j)` pair:\n\t\t\tidx = this._loc( i, j, idx );\n\n\t\t\t// Check for an edge:\n\t\t\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {\n\t\t\t\tedges.push( [ i, j ] );\n\t\t\t}\n\t\t}\n\t}\n\treturn edges;\n});\n\n/**\n* Checks whether a directed edge exists between two vertices.\n*\n* @name hasEdge\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - starting vertex\n* @param {NonNegativeInteger} j - ending vertex\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} first argument must not exceed matrix dimensions\n* @throws {RangeError} second argument must not exceed matrix dimensions\n* @returns {boolean} boolean indicating if an edge exists\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* // ...\n*\n* var bool = adj.hasEdge( 0, 1 );\n* // returns true\n*\n* bool = adj.hasEdge( 0, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 1, 2 );\n* // returns true\n*\n* bool = adj.hasEdge( 2, 3 );\n* // returns true\n*\n* bool = adj.hasEdge( 1, 3 );\n* // returns false\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'hasEdge', function hasEdge( i, j ) {\n\tvar idx;\n\tif ( !isNonNegativeInteger( i ) ) {\n\t\tthrow new TypeError( format( '1S92d', i ) );\n\t}\n\tif ( !isNonNegativeInteger( j ) ) {\n\t\tthrow new TypeError( format( '1S93X', j ) );\n\t}\n\tif ( i >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Au', i ) );\n\t}\n\tif ( j >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Av', j ) );\n\t}\n\t// Resolve the `(i,j)` pair:\n\tidx = this._loc( i, j, [ 0, 0 ] );\n\n\t// Check for an edge:\n\treturn isSet( this._buffer[ idx[0] ], idx[1] );\n});\n\n/**\n* Returns the indegree of a vertex (i.e., number of edges ending at a vertex).\n*\n* @name inDegree\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} j - vertex\n* @throws {TypeError} must provide a nonnegative integer\n* @throws {RangeError} must not exceed matrix dimensions\n* @returns {NonNegativeInteger} indegree\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var d = adj.inDegree( 2 );\n* // returns 2\n*\n* d = adj.inDegree( 3 );\n* // returns 1\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'inDegree', function inDegree( j ) {\n\tvar deg;\n\tvar idx;\n\tvar i;\n\tif ( !isNonNegativeInteger( j ) ) {\n\t\tthrow new TypeError( format( '1S92K', j ) );\n\t}\n\tif ( j >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Aw', j ) );\n\t}\n\t// Iterate over the rows and add up the number of edges...\n\tdeg = 0;\n\tidx = [ 0, 0 ];\n\tfor ( i = 0; i < this._N; i++ ) {\n\t\t// Resolve the `(i,j)` pair:\n\t\tidx = this._loc( i, j, idx );\n\n\t\t// Check for an edge:\n\t\tdeg += bitValue( this._buffer[ idx[0] ], idx[1] );\n\t}\n\treturn deg;\n});\n\n/**\n* Returns a list of vertices having edges ending at a specified vertex.\n*\n* @name inEdges\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} j - vertex\n* @throws {TypeError} must provide a nonnegative integer\n* @throws {RangeError} must not exceed matrix dimensions\n* @returns {Array} list of vertices\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var e = adj.inEdges( 2 );\n* // returns [ 0, 1 ]\n*\n* e = adj.inEdges( 3 );\n* // returns [ 2 ]\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'inEdges', function inEdges( j ) {\n\tvar edges;\n\tvar idx;\n\tvar i;\n\tif ( !isNonNegativeInteger( j ) ) {\n\t\tthrow new TypeError( format( '1S92K', j ) );\n\t}\n\tif ( j >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Aw', j ) );\n\t}\n\t// Iterate over the rows and retrieve edges...\n\tedges = [];\n\tidx = [ 0, 0 ];\n\tfor ( i = 0; i < this._N; i++ ) {\n\t\t// Resolve the `(i,j)` pair:\n\t\tidx = this._loc( i, j, idx );\n\n\t\t// Check for an edge:\n\t\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {\n\t\t\tedges.push( i );\n\t\t}\n\t}\n\treturn edges;\n});\n\n/**\n* Returns the total number of edges.\n*\n* @name nedges\n* @memberof CompactAdjacencyMatrix.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* // ...\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n*\n* // ...\n*\n* var M = adj.nedges;\n* // returns 3\n*/\nsetReadOnlyAccessor( CompactAdjacencyMatrix.prototype, 'nedges', function nedges() {\n\treturn this._M;\n});\n\n/**\n* Returns the number of vertices.\n*\n* @name nvertices\n* @memberof CompactAdjacencyMatrix.prototype\n* @readonly\n* @type {NonNegativeInteger}\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* // ...\n*\n* var N = adj.nvertices;\n* // returns 4\n*/\nsetReadOnlyAccessor( CompactAdjacencyMatrix.prototype, 'nvertices', function nvertices() {\n\treturn this._N;\n});\n\n/**\n* Returns the outdegree of a vertex (i.e., number of edges starting from a vertex).\n*\n* @name outDegree\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - vertex\n* @throws {TypeError} must provide a nonnegative integer\n* @throws {RangeError} must not exceed matrix dimensions\n* @returns {NonNegativeInteger} outdegree\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var d = adj.outDegree( 2 );\n* // returns 1\n*\n* d = adj.outDegree( 0 );\n* // returns 2\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'outDegree', function outDegree( i ) {\n\tvar deg;\n\tvar idx;\n\tvar j;\n\tif ( !isNonNegativeInteger( i ) ) {\n\t\tthrow new TypeError( format( '1S92K', i ) );\n\t}\n\tif ( i >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Aw', i ) );\n\t}\n\t// Iterate over the columns and add up the number of edges...\n\tdeg = 0;\n\tidx = [ 0, 0 ];\n\tfor ( j = 0; j < this._N; j++ ) {\n\t\t// Resolve the `(i,j)` pair:\n\t\tidx = this._loc( i, j, idx );\n\n\t\t// Check for an edge:\n\t\tdeg += bitValue( this._buffer[ idx[0] ], idx[1] );\n\t}\n\treturn deg;\n});\n\n/**\n* Returns a list of vertices having edges starting at a specified vertex.\n*\n* @name outEdges\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - vertex\n* @throws {TypeError} must provide a nonnegative integer\n* @throws {RangeError} must not exceed matrix dimensions\n* @returns {Array} list of vertices\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var e = adj.outEdges( 2 );\n* // returns [ 3 ]\n*\n* e = adj.outEdges( 0 );\n* // returns [ 1, 2 ]\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'outEdges', function outEdges( i ) {\n\tvar edges;\n\tvar idx;\n\tvar j;\n\tif ( !isNonNegativeInteger( i ) ) {\n\t\tthrow new TypeError( format( '1S92K', i ) );\n\t}\n\tif ( i >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Aw', i ) );\n\t}\n\t// Iterate over the rows and retrieve edges...\n\tedges = [];\n\tidx = [ 0, 0 ];\n\tfor ( j = 0; j < this._N; j++ ) {\n\t\t// Resolve the `(i,j)` pair:\n\t\tidx = this._loc( i, j, idx );\n\n\t\t// Check for an edge:\n\t\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {\n\t\t\tedges.push( j );\n\t\t}\n\t}\n\treturn edges;\n});\n\n/**\n* Removes a directed edge between two vertices.\n*\n* @name removeEdge\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @param {NonNegativeInteger} i - starting vertex\n* @param {NonNegativeInteger} j - ending vertex\n* @throws {TypeError} first argument must be a nonnegative integer\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {RangeError} first argument must not exceed matrix dimensions\n* @throws {RangeError} second argument must not exceed matrix dimensions\n* @returns {CompactAdjacencyMatrix} adjacency matrix instance\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* // ...\n*\n* adj.removeEdge( 0, 1 );\n* adj.removeEdge( 0, 2 );\n* adj.removeEdge( 1, 2 );\n* adj.removeEdge( 2, 3 );\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'removeEdge', function removeEdge( i, j ) {\n\tvar idx;\n\tif ( !isNonNegativeInteger( i ) ) {\n\t\tthrow new TypeError( format( '1S92d', i ) );\n\t}\n\tif ( !isNonNegativeInteger( j ) ) {\n\t\tthrow new TypeError( format( '1S93X', j ) );\n\t}\n\tif ( i >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Au', i ) );\n\t}\n\tif ( j >= this._N ) {\n\t\tthrow new RangeError( format( '1S9Av', j ) );\n\t}\n\t// Resolve the `(i,j)` pair:\n\tidx = this._loc( i, j, [ 0, 0 ] );\n\n\t// Clear the bit for the edge:\n\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {\n\t\tthis._buffer[ idx[0] ] = clearBit( this._buffer[ idx[0] ], idx[1] );\n\t\tthis._M -= 1;\n\t}\n\treturn this;\n});\n\n/**\n* Returns an adjacency list representation.\n*\n* @name toAdjacencyList\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @returns {Array} adjacency list representation\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 0, 1 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var list = adj.toAdjacencyList();\n* // returns [ [ 1, 2 ], [ 2 ], [ 3 ], [] ]\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'toAdjacencyList', function toAdjacencyList() {\n\tvar list;\n\tvar idx;\n\tvar tmp;\n\tvar i;\n\tvar j;\n\n\tlist = [];\n\tidx = [ 0, 0 ];\n\tfor ( i = 0; i < this._N; i++ ) {\n\t\ttmp = [];\n\t\tfor ( j = 0; j < this._N; j++ ) {\n\t\t\t// Resolve the `(i,j)` pair:\n\t\t\tidx = this._loc( i, j, idx );\n\n\t\t\t// Check for an edge:\n\t\t\tif ( isSet( this._buffer[ idx[0] ], idx[1] ) ) {\n\t\t\t\ttmp.push( j );\n\t\t\t}\n\t\t}\n\t\tlist.push( tmp );\n\t}\n\treturn list;\n});\n\n/**\n* Returns a topological ordering of the directed graph.\n*\n* ## Notes\n*\n* -   The function returns a two-element array.\n* -   If the function is able to compute a topological ordering, the first array element is the topological ordering and the second element is `null`.\n* -   If a topological ordering cannot be achieved (e.g., due to the graph not being a directed acyclic graph (DAG)), the first array element is `null` and the second element is the first encountered cycle.\n*\n* @name toposort\n* @memberof CompactAdjacencyMatrix.prototype\n* @type {Function}\n* @returns {Array} topological ordering\n*\n* @example\n* var adj = new CompactAdjacencyMatrix( 4 );\n* // returns <CompactAdjacencyMatrix>\n*\n* adj.addEdge( 1, 0 );\n* adj.addEdge( 1, 2 );\n* adj.addEdge( 0, 2 );\n* adj.addEdge( 2, 3 );\n*\n* var results = adj.toposort();\n* // returns <Array>\n*\n* var order = results[ 0 ];\n* // returns [ 1, 0, 2, 3 ]\n*\n* var cycle = results[ 1 ];\n* // returns null\n*/\nsetReadOnly( CompactAdjacencyMatrix.prototype, 'toposort', function toposort() {\n\tvar marks;\n\tvar self;\n\tvar out;\n\tvar idx;\n\tvar err;\n\tvar N;\n\tvar s;\n\tvar i;\n\n\tself = this;\n\tN = this._N;\n\n\t// Initialize an empty list that will contain the sorted vertices:\n\tout = [];\n\n\t// If the graph is empty, nothing to sort...\n\tif ( this._N === 0 ) {\n\t\treturn [ out, null ];\n\t}\n\t// Initialize an array for keeping track of whether a vertex has been \"visited\":\n\tmarks = new Int8Array( N );\n\n\t// Initialize a stack for keeping track of cycles:\n\ts = [];\n\n\t// Process vertices using depth-first-search...\n\tidx = [ 0, 0 ];\n\tfor ( i = 0; i < N; i++ ) {\n\t\tif ( marks[ i ] === 0 ) {\n\t\t\terr = visit( i );\n\t\t\tif ( err !== 0 ) {\n\t\t\t\t// Found a cycle...\n\t\t\t\ts.push( i );\n\t\t\t\treturn [ null, s ];\n\t\t\t}\n\t\t}\n\t}\n\t// Reverse the output array as the leaves were added first, followed the by the roots, via depth-first-search:\n\tgrev( out.length, out, 1 );\n\n\treturn [ out, null ];\n\n\t/**\n\t* Visits a graph vertex and follows edges until finding a leaf vertex (if one exists).\n\t*\n\t* ## Notes\n\t*\n\t* -   If the function is able to successfully perform a depth-first-search, the functions returns `0`; otherwise, the function returns `-1` in the event of a cycle.\n\t*\n\t* @private\n\t* @param {NonNegativeInteger} i - vertex\n\t* @returns {integer} error code\n\t*/\n\tfunction visit( i ) {\n\t\tvar err;\n\t\tvar j;\n\n\t\t// Check if we've already processed/visited this vertex...\n\t\tif ( marks[ i ] === 2 ) {\n\t\t\treturn 0;\n\t\t}\n\t\t// Check if we've seen this vertex before and the vertex is still being processed...\n\t\tif ( marks[ i ] === 1 ) {\n\t\t\t// We've found a cycle...\n\t\t\treturn -1;\n\t\t}\n\t\t// Mark the current vertex as currently being processed:\n\t\tmarks[ i ] = 1;\n\n\t\t// Follow all edges from the current vertex...\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tidx = self._loc( i, j, idx ); // eslint-disable-line no-underscore-dangle\n\t\t\tif ( isSet( self._buffer[ idx[0] ], idx[1] ) ) { // eslint-disable-line no-underscore-dangle\n\t\t\t\terr = visit( j );\n\t\t\t\tif ( err !== 0 ) {\n\t\t\t\t\t// This vertex is part of a cycle, so add to cycle stack...\n\t\t\t\t\ts.push( j );\n\t\t\t\t\treturn err;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Mark the current vertex as processed:\n\t\tmarks[ i ] = 2;\n\n\t\t// Add to the output array now that all subsequent vertices (relative to this vertex) in the graph have already been added to the output array:\n\t\tout.push( i );\n\n\t\treturn 0;\n\t}\n});\n\n\n// EXPORTS //\n\nexport default CompactAdjacencyMatrix;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = it.next();\n\t\tz = v.value;\n\t\tif ( z ) {\n\t\t\tz = clbk.call( thisArg, z, i );\n\t\t\tif ( !isCollection( z ) ) {\n\t\t\t\treturn new TypeError( format( '1S9Ap', z ) );\n\t\t\t}\n\t\t\tout.push( z );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tz = v.value;\n\t\tif ( z ) {\n\t\t\tif ( !isCollection( z ) ) {\n\t\t\t\treturn new TypeError( format( '1S9Ao', z ) );\n\t\t\t}\n\t\t\tout.push( z );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @param {Function} clbk - callback to invoke for each iterated value\n* @param {*} thisArg - invocation context\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIteratorMap( it, clbk, thisArg ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\tvar i;\n\n\tout = [];\n\ti = -1;\n\twhile ( true ) {\n\t\ti += 1;\n\t\tv = it.next();\n\t\tz = v.value;\n\t\tif ( z ) {\n\t\t\tz = clbk.call( thisArg, z, i );\n\t\t\tif ( !isCollection( z ) ) {\n\t\t\t\treturn new TypeError( format( '1S9Ap', z ) );\n\t\t\t}\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIteratorMap;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport isCollection from '@stdlib/assert-is-collection';\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n\n// MAIN //\n\n/**\n* Returns an array of iterated values.\n*\n* @private\n* @param {Object} it - iterator\n* @returns {(Array|TypeError)} array or an error\n*/\nfunction fromIterator( it ) {\n\tvar out;\n\tvar v;\n\tvar z;\n\n\tout = [];\n\twhile ( true ) {\n\t\tv = it.next();\n\t\tz = v.value;\n\t\tif ( z ) {\n\t\t\tif ( !isCollection( z ) ) {\n\t\t\t\treturn new TypeError( format( '1S9Ao', z ) );\n\t\t\t}\n\t\t\tout.push( z[ 0 ], z[ 1 ] );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default fromIterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Sets a bit.\n*\n* @private\n* @param {integer32} value - integer value\n* @param {NonNegativeInteger} i - bit to set\n* @returns {integer32} updated integer value\n*\n* @example\n* var v = setBit( 0, 2 );\n* // returns 4\n*/\nfunction setBit( value, i ) {\n\tvalue |= 1 << i;\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default setBit;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Clears a bit.\n*\n* @private\n* @param {integer32} value - integer value\n* @param {NonNegativeInteger} i - bit to clear\n* @returns {integer32} updated integer value\n*\n* @example\n* var v = clearBit( 5, 2 );\n* // returns 1\n*/\nfunction clearBit( value, i ) {\n\tvalue &= ~( 1 << i );\n\treturn value;\n}\n\n\n// EXPORTS //\n\nexport default clearBit;\n"],"names":["isSet","value","i","Boolean","bitValue","HAS_ITERATOR_SYMBOL","hasIteratorSymbolSupport","NBITS","Int32Array","BYTES_PER_ELEMENT","CompactAdjacencyMatrix","N","this","isNonNegativeInteger","TypeError","format","_N","_M","_buffer","ceil","setReadOnly","list","thisArg","nargs","edges","clbk","adj","tmp","len","j","isFunction","arguments","length","isArrayLikeObject","call","isCollection","addEdge","isObject","ITERATOR_SYMBOL","next","it","out","v","z","push","done","fromIteratorAdjListMap","fromIteratorAdjList","Error","edge","fromIteratorEdgesMap","fromIteratorEdges","prototype","bucket","bit","idx","floor","RangeError","_loc","setBit","setReadOnlyAccessor","deg","clearBit","marks","self","s","Int8Array","visit","grev","err"],"mappings":"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"}